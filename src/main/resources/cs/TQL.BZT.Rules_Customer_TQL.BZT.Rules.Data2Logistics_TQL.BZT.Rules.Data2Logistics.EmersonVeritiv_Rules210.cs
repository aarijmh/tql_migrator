using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using TQL.BZT.BLL.LMDataContracts;
using TQL.BZT.BLL.DataContracts;
using TQL.BZT.Rules.Utils.LM;
using TQL.BZT.Rules.Utils;
using TQL.BZT.BLL.LMDataContracts;
using System.Data.SqlClient;


/***********************************************************************************************************
 * *********************************************************************************************************
 * PLEASE NOTE:  It may be easier, and it is ok to use a BizTalk map rather than this code.  The new schemas
 *               and maps are so much better to work with.  In the future, when the custom functionality
 *               that would normally go in these methods can be generated by database settings, custom maps
 *               can be eliminated completely.
 ***********************************************************************************************************/

namespace TQL.BZT.Rules.Data2Logistics.EmersonVeritiv
{
    public class Rules210
    {

        /// <summary>
        /// Common 210 Settings for the group.
        /// ExtraCode to be added.But code not to be removed from Group settings.
        /// </summary>
        /// <param name="edi210Obj">ref 210 DataContract Object</param>
        /// <returns>210 DataContract Object by Reference</returns>
        public static void setGroupValues(ref TQLBZTEDI210 edi210Obj)
        {

        }

        /***********************************************************************************************************
         * *********************************************************************************************************
         * PLEASE NOTE:  It may be easier, and it is ok to use a BizTalk map rather than this code.  The new schemas
         *               and maps are so much better to work with.  In the future, when the custom functionality
         *               that would normally go in these methods can be generated by database settings, custom maps
         *               can be eliminated completely.
         ***********************************************************************************************************/
        /// <summary>
        /// Custom Settings for individual customer
        /// </summary>
        /// <param name="edi210Obj">ref 210 DataContract Object</param>
        /// <returns>210 DataContract Object By Ref</returns>
        public static void setCustomerValues(ref TQLBZTEDI210 edi210Obj)
        {
            #region Rules
            /****       Initialize RulesInfoCollection for the Customer  *****/
            RulesInfoCollection rulesinfocollection = new RulesInfoCollection();
            rulesinfocollection = edi210Obj.LOADHDR.RULEINFOCollection;

            /******    Set include/exclude flag. RuleType = 8   ******/
            /******    Derived from the defaults then modified  ******/

            //These are the most common used. Include them all. Let developer turn them off.
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "B3", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "C3", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N9", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "G62", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1_N1", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1_N3", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1_N4", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "L3", "T");

            //Most Common Detail Charge Rules. Need to determine if this is moved to detail rules.
            //Not sure if there will be different rules by line level. Something to think about.
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_L5", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_L0", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_L1", "T");
            //Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_L7", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_L0", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "", "T");

            //Never seen these used. Set to False. **** NOTE ***** These are not mapped in common 210 map. Flags are still checked.
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "C2", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "ITD", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "R3", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "H3", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "K1", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1_N2", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1_N9", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N7Loop1", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N7Loop1_N7", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "M7", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "SPOLoop1", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "S5Loop1", "F");

            //Detail Charge Rules set to false. Need to determine if this is moved to detail rules.
            //Not sure if there will be different rules by line level. Something to think about.
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_N9_5", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_POD", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_H1", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_H2", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_L4", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_K1_2", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_SPOLoop3", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_SPOLoop3_SPO_3", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_SPOLoop3_SDQ_3", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_N1Loop3", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_N1Loop3_N1_3", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_N1Loop3_N2_3", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_N1Loop3_N3_3", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_N1Loop3_N4_3", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_N1Loop3_N9_6", "F");
            #endregion
            
            #region Shipment Misc
            if (edi210Obj.LOADHDR.LOADHDRINFO.SHIPMENTID == "")
            {
                edi210Obj.LOADHDR.LOADHDRINFO.SHIPMENTID = edi210Obj.LOADHDR.LOADHDRINFO.PONUMBER.ToString();
            }
            
            //Setting the B310 Delivery Qualifier from "140" to "035"
            foreach (RulesInfo rule in edi210Obj.LOADHDR.RULEINFOCollection.Items)
            {
                if ((rule.RULETYPE == "1") && (rule.DESTINATIONNODE == "B310")) rule.DESTINATIONVALUE = "035";
            }
            #endregion
            
            #region Header Ref Numbers 
            //Add practical miles to L713. Need to add to ref number first due to miles not being in schema.
            TQL.BZT.BLL.LMDataContracts.LoadDetail LMDetail = TQL.BZT.Rules.Utils.LM.Loads.LoadInfo((int)edi210Obj.LOADHDR.LOADHDRINFO.PONUMBER);

            string PracticalMiles = LMDetail.PracticalMiles.ToString();

            RefNumberInfo refnum1 = new RefNumberInfo();
            refnum1.REFNUMBERQUAL = "8";
            refnum1.HDRDETFLAG = "H";
            refnum1.PONUMBER = edi210Obj.LOADHDR.LOADHDRINFO.PONUMBER;
            refnum1.EDI210DESTINATION = "L7";
            refnum1.REFNUMBER = PracticalMiles;
            refnum1.REFNUMBERQUAL = "Practical Miles";
            edi210Obj.LOADHDR.REFNUMBERINFOCollection.Items.Insert(0, refnum1);


            // L707  Freight Class Code 70
            RefNumberInfo refL707 = new RefNumberInfo();
            refL707.EDI210DESTINATION = "L7";
            refL707.HDRDETFLAG = "H";
            refL707.REFNUMBER = "70";
            refL707.REFNUMBERQUAL = "L707";
            edi210Obj.LOADHDR.REFNUMBERINFOCollection.Items.Add(refL707);
            #endregion

            #region Stops
            foreach (StopInfo210 stop in edi210Obj.STOPINFOCollection.Items)
            {
                if (stop.ADDRESSINFO.ADDRESSQUAL == "SF") stop.ADDRESSINFO.ADDRESSQUAL = "SH"; 
                if (stop.ADDRESSINFO.ADDRESSQUAL == "ST") stop.ADDRESSINFO.ADDRESSQUAL = "CN";
            }
            #endregion

            #region LM Date/Time
            //Pull Load Date from LM data - tblpickups where 0 is the first stop
            DateTime? timePickedup = TQL.BZT.Rules.Utils.LM.Picks.TimeLoaded((int)edi210Obj.LOADHDR.LOADHDRINFO.PONUMBER, 0);

            if (timePickedup.HasValue)
            {
                DateTime pickdate = (DateTime)timePickedup;
                DateTime picktime = (DateTime)timePickedup;

                String pickupDate = pickdate.ToString("yyyyMMdd");
                String pickupTime = picktime.ToString("HHmm");

                //Add Pickup Date to Header G62 with Qualifier;
                DateTimeInfo hrefnumber2 = new DateTimeInfo();
                hrefnumber2.DATE = pickupDate;
                hrefnumber2.DATEQUAL = "11";
                edi210Obj.LOADHDR.DATETIMEINFOCollection.Items.Add(hrefnumber2);
            }

            else
            {
                DateTime? loadPickUp = TQL.BZT.Rules.Utils.LM.Loads.LoadDateTime((int)edi210Obj.LOADHDR.LOADHDRINFO.PONUMBER);

                DateTime pickup = (DateTime)loadPickUp;

                String pickupDate = pickup.ToString("yyyyMMdd");
                String pickupTime = pickup.ToString("HHmm");

                //Add Pickup Date to Header G62 with Qualifier;
                DateTimeInfo hrefnumber2 = new DateTimeInfo();
                hrefnumber2.DATE = pickupDate;
                hrefnumber2.DATEQUAL = "11";
                edi210Obj.LOADHDR.DATETIMEINFOCollection.Items.Add(hrefnumber2);
            }
            #endregion

            #region Header Address
            //Add BT Address to Stop Level
            foreach (AddressInfo hdraddress in edi210Obj.LOADHDR.ADDRESSINFOCollection.Items)
            {
                if (hdraddress.ADDRESSQUAL == "BT")
                {
                    StopInfo210 AddressHdr = new StopInfo210();
                    AddressHdr.PONUMBER = hdraddress.PONUMBER;
                    AddressHdr.BZTSTOPID = hdraddress.BZTSTOPID;
                    AddressHdr.ISFIRSTSTOP = true;
                    AddressInfo AddressInfoColl = new AddressInfo();
                    AddressInfoColl.PONUMBER = hdraddress.PONUMBER;
                    AddressInfoColl.BZTSTOPID = hdraddress.BZTSTOPID;
                    AddressInfoColl.HDRDETFLAG = hdraddress.HDRDETFLAG;
                    AddressInfoColl.TQLADDRESSID = hdraddress.ID;
                    AddressInfoColl.ADDRESSQUAL = hdraddress.ADDRESSQUAL;
                    AddressInfoColl.NAME = hdraddress.NAME;
                    AddressInfoColl.IDQUAL = hdraddress.IDQUAL;
                    AddressInfoColl.ID = hdraddress.ID;
                    AddressInfoColl.ADDRESS = hdraddress.ADDRESS;
                    AddressInfoColl.CITY = hdraddress.CITY;
                    AddressInfoColl.STATE = hdraddress.STATE;
                    AddressInfoColl.ZIP = hdraddress.ZIP;
                    AddressInfoColl.COUNTRY = hdraddress.COUNTRY;
                    AddressHdr.ADDRESSINFO = AddressInfoColl;
                    edi210Obj.STOPINFOCollection.Items.Insert(2, AddressHdr);
                }
            }
            #endregion

            #region Charges
            foreach (ChargeInfo charge in edi210Obj.INVOICE.CHARGEINFOCollection.Items)
            {
                if (charge.QTY != 1 ) charge.QUOM = "DM";                
                else charge.QUOM = "FR";
            }
            #endregion

            #region Pull Equipment
            //Pull carrierID and driverID from load.
            //TQL.BZT.BLL.LMDataContracts.LoadDetail LMDetail = TQL.BZT.Rules.Utils.LM.Loads.LoadInfo((int)edi210Obj.LOADHDR.LOADHDRINFO.PONUMBER);

            string carrierid = LMDetail.CarrierId.ToString();
            string driverid = LMDetail.DriverId.ToString();
            string trucknumber = "";
            string trailernumber = "";
            int? trailerID = LMDetail.TrailerId;

            string gDBConnstr = System.Configuration.ConfigurationManager.ConnectionStrings["TQLConnectionStringDefault"].ConnectionString;

            // set to devsqlclst if not returned from configuration file
            if (string.IsNullOrEmpty(gDBConnstr))
            {
                // If this is defined in configuration file , if not it will take default
                gDBConnstr = "Data Source=devsqlclst;Initial Catalog=TQL;Integrated Security=True;";
            }

            using (SqlConnection conn = new SqlConnection(gDBConnstr))
            {
                SqlCommand cmd = new SqlCommand("spEdiGetDriverDetails", conn);

                cmd.Parameters.AddWithValue("@lCarrierId", carrierid);
                cmd.Parameters.AddWithValue("@lDriver", driverid);

                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                conn.Open();

                SqlDataReader dr = cmd.ExecuteReader();

                while (dr.Read())
                {
                    trucknumber = dr["trucknumber"].ToString();
                    trailernumber = dr["trailernumber"].ToString();
                }

                //MessageBox.Show(trucknumber + " - " + trailernumber);

                //if (trailernumber != "NOTAVAIL")
                //{
                RefNumberInfo hrefnumber5 = new RefNumberInfo();
                hrefnumber5.EDI210DESTINATION = "TrailerNumber";
                hrefnumber5.REFNUMBERQUAL = "TrailerNumber";
                hrefnumber5.REFNUMBER = trailernumber;
                edi210Obj.LOADHDR.REFNUMBERINFOCollection.Items.Add(hrefnumber5);

                edi210Obj.LOADHDR.LOADHDRINFO.DRIVERID = trailernumber;
                //}

            }

            //Set Trailer Type for N7_11;
            string TrailerType = LMDetail.TrailerType;

            RefNumberInfo hrefnumber6 = new RefNumberInfo();
            hrefnumber6.EDI210DESTINATION = "TrailerType";
            hrefnumber6.REFNUMBERQUAL = "TrailerType";
            hrefnumber6.REFNUMBER = TrailerType;
            edi210Obj.LOADHDR.REFNUMBERINFOCollection.Items.Add(hrefnumber6);

            switch (trailerID)
            {
                case 34: //Rail/IMDL
                    edi210Obj.LOADHDR.LOADHDRINFO.EQUIPCODE = "RR"; //(Rail Car)
                    break;

                case 2: //Van
                case 3: //Van or Reefer
                case 12: //Vented Van
                case 24: //Van Team
                case 25: //Van or Reefer Team
                    edi210Obj.LOADHDR.LOADHDRINFO.EQUIPCODE = "TF"; //(Truck, Van)
                    break;

                case 4: //Flat
                case 7: //Flat 4 Ft Tarp
                case 8: //Flat 6 Ft Tarp
                case 9: //Flat 8 Ft Tarp
                case 10: //Flat With Sides
                case 27: //Flat Team
                case 28: //Flatbed or Stepdeck
                    edi210Obj.LOADHDR.LOADHDRINFO.EQUIPCODE = "FT"; //Flat
                    break;
                
                case 5: //Step Deck
                case 14: //Step Deck with 4 ft tarp
                case 15: //Step Deck with 6 ft tarp
                case 16: //Step Deck with 8 ft tarp
                    edi210Obj.LOADHDR.LOADHDRINFO.EQUIPCODE = "SD"; //(Single-Drop Trailer)
                    break;
                    
                case 11: //Double Drop
                case 20: //Double Drop with 4 ft tarp
                case 21: //Double Drop with 6 ft tarp
                case 22: //Double Drop with 8 ft tarp
                    edi210Obj.LOADHDR.LOADHDRINFO.EQUIPCODE = "DD"; //(Double-Drop Trailer)
                    break;

                default:
                    edi210Obj.LOADHDR.LOADHDRINFO.EQUIPCODE = "TL";
                    break;
            }

            #endregion

        }

    }
}
