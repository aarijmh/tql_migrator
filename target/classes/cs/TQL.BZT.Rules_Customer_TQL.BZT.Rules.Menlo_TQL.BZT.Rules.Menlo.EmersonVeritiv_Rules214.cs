using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using TQL.BZT.BLL.DataContracts;
using TQL.BZT.Rules.Utils;

/***********************************************************************************************************
 * *********************************************************************************************************
 * PLEASE NOTE:  It may be easier, and it is ok to use a BizTalk map rather than this code.  The new schemas
 *               and maps are so much better to work with.  In the future, when the custom functionality
 *               that would normally go in these methods can be generated by database settings, custom maps
 *               can be eliminated completely.
 ***********************************************************************************************************/
namespace TQL.BZT.Rules.Menlo.EmersonVeritiv
{
    public class Rules214
    {
        /// <summary>
        /// Common 214 Settings for the group.
        /// ExtraCode to be added.But code not to be removed from Group settings.
        /// </summary>
        /// <param name="edi214Obj">ref 214 DataContract Object</param>
        /// <returns>214 DataContract Object by Reference</returns>
        public static void setGroupValues(ref TQLBZTEDI214 edi214Obj)
        {


            /****       Initialize RulesInfoCollection for the Group  *****/
            RulesInfoCollection rulesinfocollection = new RulesInfoCollection();
            rulesinfocollection = edi214Obj.LOADHDR.RULEINFOCollection;



            /******    Set include/exclude flag. RuleType = 8   ******/
            /******    Derived from the defaults then modified  ******/

            //These are the most common used. Include them all. Let developer turn them off.
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1_N1", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1_N3", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1_N4", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1_G62", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_AT7Loop1", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_AT7Loop1_MS1", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_AT7Loop1_MS2", "T");

            //10/2012 - Now there is a requirement to pass longitute, latitude. Will be pulled from tblZipCodes (spPopulateLongLatbyCityState)
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_AT7Loop1_MS101", "T");  //99.99999% of maps
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_AT7Loop1_MS104", "F");

            //Need to set the MS203 value to TL by default. At least one customer requires a different value.
            Common.UpdateHardCodedValueRule(ref rulesinfocollection, "LXLoop1_AT7Loop1_MS203", "TL");

            //Controlled by group and customer rules.
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "L11", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "MAN", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "K1", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1_N2", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1_L11_2", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_L11_3", "F");



            //Set Hard Coded values. RuleType = 1\\
            //NOTE:  The canonical map must have the logic to check hard coded values. This is limited for now.

            /* Sample Code
            Common.UpdateHardCodedValueRule(ref rulesinfocollection, "N9_C04001", "8M"); //Params (Rules Info Collection to be updated, Destination element, hard coded value)
             
            string hardcodevalue = edi214Obj......   or "aaaabbbbcccc"
            Common.UpdateHardCodedValueRule(ref rulesinfocollection, "N9_C04001", hardcodedvalue); 
             
            */

        }

        /***********************************************************************************************************
         * *********************************************************************************************************
         * PLEASE NOTE:  It may be easier, and it is ok to use a BizTalk map rather than this code.  The new schemas
         *               and maps are so much better to work with.  In the future, when the custom functionality
         *               that would normally go in these methods can be generated by database settings, custom maps
         *               can be eliminated completely.
         ***********************************************************************************************************/
        /// <summary>
        /// Custom Settings for individual customer
        /// </summary>
        /// <param name="edi214Obj">ref 214 DataContract Object</param>
        /// <returns>214 DataContract Object by Reference</returns>
        public static void setCustomerValues(ref TQLBZTEDI214 edi214Obj)
        {


            /****       Initialize RulesInfoCollection for the Customer  *****/
            RulesInfoCollection rulesinfocollection = new RulesInfoCollection();
            rulesinfocollection = edi214Obj.LOADHDR.RULEINFOCollection;



            /******    Set include/exclude flag. RuleType = 8   ******/
            /******    Derived from the defaults then modified  ******/

            //These are the most common used. Include them all. Let developer turn them off.
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1_N1", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1_N3", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1_N4", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1_G62", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_AT7Loop1", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_AT7Loop1_MS1", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_AT7Loop1_MS2", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "MS3", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_AT8", "T");


            //10/2012 - Now there is a requirement to pass longitute, latitude. Will be pulled from tblZipCodes (spPopulateLongLatbyCityState)
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_AT7Loop1_MS101", "T");//99.99999% of maps
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_AT7Loop1_MS102", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_AT7Loop1_MS103", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_AT7Loop1_MS104", "F");



            //Need to set the MS203 value to TL by default. At least one customer requires a different value.
            Common.UpdateHardCodedValueRule(ref rulesinfocollection, "LXLoop1_AT7Loop1_MS203", "TL");

            //Controlled by group and customer rules.
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "L11", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "MAN", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "K1", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1_N2", "F");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "N1Loop1_L11_2", "T");
            Common.UpdateIncludeSegmentRule(ref rulesinfocollection, "LXLoop1_L11_3", "T");

            //Add shipment ID to header level L11 with AG qualifier
            RefNumberInfo hrefnumber1 = new RefNumberInfo();
            hrefnumber1.EDI214DESTINATION = "L11";
            hrefnumber1.REFNUMBERQUAL = "SI";
            hrefnumber1.REFNUMBER = edi214Obj.LOADHDR.LOADHDRINFO.SHIPMENTID;
            edi214Obj.LOADHDR.REFNUMBERINFOCollection.Items.Add(hrefnumber1);

            RefNumberInfo hrefnumber2 = new RefNumberInfo();
            hrefnumber2.EDI214DESTINATION = "L11";
            hrefnumber2.REFNUMBERQUAL = "BN";
            hrefnumber2.REFNUMBER = edi214Obj.LOADHDR.LOADHDRINFO.SHIPMENTID;
            edi214Obj.LOADHDR.REFNUMBERINFOCollection.Items.Add(hrefnumber2);

            decimal loadweight = (decimal)edi214Obj.LOADHDR.LOADHDRINFO.WEIGHT;
            edi214Obj.LOADHDR.LOADHDRINFO.WEIGHT = decimal.Truncate(loadweight);



            //Add stop sequence number to L11 segment of the stop
            foreach (StopInfo214 stop in Lists.GetSTOPSList(edi214Obj))
            {

                if (stop.ADDRESSINFO.ADDRESSQUAL == "SF")
                {
                    stop.ADDRESSINFO.ADDRESSQUAL = "SH";
                }

                foreach (DateTimeInfo datetimeinfo in stop.DATETIMEINFOCollection.Items)
                {
                    datetimeinfo.TIME = null;
                    datetimeinfo.TIMEQUAL = null;
                    datetimeinfo.TIMEZONE = null;

                }
                stop.STOPSEQ = 1;
            }


            #region Add Stop Sequence to LX Loop L11
            foreach (StopInfo214 stop in Lists.GetSTOPSList(edi214Obj))
            {
                if (stop.EventInfoCollection != null)
                {
                    foreach (EventInfo eventinfo in stop.EventInfoCollection.Items)
                    {
                        RefNumberInfo refnumberQN = new RefNumberInfo();
                        refnumberQN.EDI214DESTINATION = "LXLoop1_L11_3";
                        refnumberQN.REFNUMBERQUAL = "QN";
                        refnumberQN.REFNUMBER = stop.STOPSEQ.ToString();
                        stop.REFNUMBERINFOCollection.Items.Add(refnumberQN);
                    }
                }
            }
            #endregion
        }

    }
}
