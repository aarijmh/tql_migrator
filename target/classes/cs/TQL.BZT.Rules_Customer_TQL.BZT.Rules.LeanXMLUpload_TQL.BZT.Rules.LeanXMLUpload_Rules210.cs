using System;
using System.Collections.Generic;
using System.Linq;
//using System.Text;
//using System.Diagnostics;
using TQL.BZT.BLL.DataContracts;
//using TQL.BZT.Rules.Utils;
//using TQL.BZT.Rules.LeanXMLUpload.ICabServiceReference;
using System.Security.Cryptography;
using System.Data.SqlClient;
using TQL.BZT.Rules.LeanXMLUpload.Utils;
using System.Configuration;
using System.IO;
using TQL.BZT.Repositories.Imaging;
using System.Diagnostics;

/***********************************************************************************************************
 * *********************************************************************************************************
 * PLEASE NOTE:  It may be easier, and it is ok to use a BizTalk map rather than this code.  The new schemas
 *               and maps are so much better to work with.  In the future, when the custom functionality
 *               that would normally go in these methods can be generated by database settings, custom maps
 *               can be eliminated completely.
 ***********************************************************************************************************/

namespace TQL.BZT.Rules.LeanXMLUpload
{
    public class Rules210
    {

        /// <summary>
        /// Common 210 Settings for the group.
        /// ExtraCode to be added.But code not to be removed from Group settings.
        /// </summary>
        /// <param name="edi210Obj">ref 210 DataContract Object</param>
        /// <returns>210 DataContract Object by Reference</returns>
        public static void setGroupValues(ref TQLBZTEDI210 edi210Obj)
        {

            //PopulateLeanDocuments(ref edi210Obj );
            PopulateData(ref edi210Obj);

        }

        private static void PopulateData(ref TQLBZTEDI210 edi210obj)
        {
            string srbase64 = string.Empty;
            string sha1value = string.Empty;
            string ShipmentID = string.Empty;
            string CustomerPO = string.Empty;
            int PONumber = default(int);
            String LeanXMLRcvPath = String.Empty;
            int tpprofileid = default(int);


            try
            {
                //PONumber
                PONumber = Convert.ToInt32(edi210obj.LOADHDR.LOADHDRINFO.PONUMBER);

                //CustomerPO  =ref1
                CustomerPO = edi210obj.INVOICE.INVOICEHDR.CUSTOMERPO.Trim();

                //ShipmentID = ref2
                if (string.IsNullOrEmpty(edi210obj.LOADHDR.LOADHDRINFO.SHIPMENTID))
                    ShipmentID = CustomerPO;
                else
                    ShipmentID = edi210obj.LOADHDR.LOADHDRINFO.SHIPMENTID.Trim();

                //TPPROFILEID
                tpprofileid = (int)edi210obj.TPPROFILEINFO.TPPROFILEID;

                //Log data to table.

                if ((((tpprofileid != null) && (tpprofileid == 0)) || (tpprofileid == null)) || (string.IsNullOrEmpty(ShipmentID))) 
                {
                    //throw new Exception("Lean - Incorrect data retrieval while processing PONumber = " + PONumber);
                    throw new Exception(String.Format("Lean - Incorrect data retrieval while processing PONumber = {0}\r\nTroubleshoot : Check if TPProfileID or CustomerPO/ShipmentID is empty or nulltpprofileid={1}\r\nShipmentID={2}", PONumber, tpprofileid, (String.IsNullOrEmpty(ShipmentID) ? "" : ShipmentID)));
                }


                //Insert in to Icab //
                bool statusUpdated = EDIPlusAcct.InsertICabProcess(3, PONumber, 3, null, null, null); //AppID : 3 = Lean , ProcessStatus :3 = Invalid
                statusUpdated = EDIPlusAcct.InsertICabProcess(3, PONumber, 3, String.Format("{0}|{1}", tpprofileid, (edi210obj.TPPROFILEINFO.ISA_ID ?? "")), CustomerPO, ShipmentID); //AppID : 3 = Lean , ProcessStatus :3 = Invalid

                if (!statusUpdated)
                {
                    string exMsg = string.Empty;
                    try
                    {
                        exMsg = String.Format("InsertICabProcess for CustomerPO,ShipmentID- PONumber={0}\r\nCustomerPO={1}\r\nShipmentID={2}\r\nTPPROFILEID={3}", edi210obj.LOADHDR.LOADHDRINFO.PONUMBER, (CustomerPO ?? string.Empty), (ShipmentID ?? string.Empty), edi210obj.TPPROFILEINFO.TPPROFILEID);
                    }
                    catch
                    {
                        exMsg = string.Empty;
                    }
                    TQL.BZT.Logger.LogGenerator.Log(false, false, true, false, true, "TQL.BZT.Rules.LeanXMLUpload", "TQL.BZT.Rules.LeanXMLUpload.Rules210.PopulateData+\r\n" + exMsg, 2022, EventLogEntryType.Error, null);
                    exMsg = null;

                }





                //Update ICab ref1 = CustomerPO, ref2 = ShipmentID ,ponumber
                statusUpdated = EDIPlusAcct.updateICabDetail(3, PONumber, 3, CustomerPO, ShipmentID); //AppID : 3 = Lean , ProcessStatus :3 = Invalid

                if (!statusUpdated)
                {
                    string exMsg = string.Empty;
                    try
                    {
                        exMsg = String.Format("updateICabDetail for CustomerPO,ShipmentID- PONumber={0}\r\nCustomerPO={1}\r\nShipmentID={2}\r\nTPPROFILEID={3}", edi210obj.LOADHDR.LOADHDRINFO.PONUMBER, (CustomerPO ?? string.Empty), (ShipmentID ?? string.Empty), edi210obj.TPPROFILEINFO.TPPROFILEID);
                    }
                    catch
                    {
                        exMsg = string.Empty;
                    }
                    TQL.BZT.Logger.LogGenerator.Log(false, false, true, false, true, "TQL.BZT.Rules.LeanXMLUpload", "TQL.BZT.Rules.LeanXMLUpload.Rules210.PopulateData+\r\n" + exMsg, 2022, EventLogEntryType.Error, null);
                    exMsg = null;

                }


                if (statusUpdated)
                {
                    //Update ICab CustomerLink = TPID
                    statusUpdated = EDIPlusAcct.updateICabCustomerLink(3, PONumber, String.Format("{0}|{1}", tpprofileid, (edi210obj.TPPROFILEINFO.ISA_ID ?? ""))); //AppID : 3 = Lean 

                    if (!statusUpdated)
                    {
                        string exMsg = string.Empty;
                        try
                        {
                            exMsg = String.Format("updateICabCustomerLink for TPID - PONumber={0}\r\nCustomerPO={1}\r\nShipmentID={2}\r\nTPPROFILEID={3}", edi210obj.LOADHDR.LOADHDRINFO.PONUMBER, (CustomerPO ?? string.Empty), (ShipmentID ?? string.Empty), edi210obj.TPPROFILEINFO.TPPROFILEID);
                        }
                        catch
                        {
                            exMsg = string.Empty;
                        }
                        TQL.BZT.Logger.LogGenerator.Log(false, false, true, false, true, "TQL.BZT.Rules.LeanXMLUpload", "TQL.BZT.Rules.LeanXMLUpload.Rules210.PopulateData+\r\n" + exMsg, 2023, EventLogEntryType.Error, null);
                        exMsg = null;

                    }

                }

                if (statusUpdated)
                {
                    //Update ICab CustomerLink = TPID
                    statusUpdated = EDIPlusAcct.updateICabProcessStatus(3, PONumber, 1); //AppID : 3 = Lean , ProcessStatus 1= Valid and ready to process

                    if (!statusUpdated)
                    {
                        string exMsg = string.Empty;
                        try
                        {
                            exMsg = String.Format("updateICabProcessStatus for Lean ICab processing - PONumber={0}\r\nCustomerPO={1}\r\nShipmentID={2}\r\nTPPROFILEID={3}", edi210obj.LOADHDR.LOADHDRINFO.PONUMBER, (CustomerPO ?? string.Empty), (ShipmentID ?? string.Empty), edi210obj.TPPROFILEINFO.TPPROFILEID);
                        }
                        catch
                        {
                            exMsg = string.Empty;
                        }
                        TQL.BZT.Logger.LogGenerator.Log(false, false, true, false, true, "TQL.BZT.Rules.LeanXMLUpload", "TQL.BZT.Rules.LeanXMLUpload.Rules210.PopulateData+\r\n" + exMsg, 2023, EventLogEntryType.Error, null);
                        exMsg = null;

                    }

                }



            }
            catch (Exception ex)
            {
                string exMsg = null;
                try
                {
                    exMsg = "LeanXMLUpload - PopulateData \r\n" +
                        "ShipmentID=" + ShipmentID + "\r\n" +
                        "CustomerPO=" + CustomerPO + "\r\n" +
                        "PONumber=" + PONumber + "\r\n" +
                        "LeanXMLRcvPath=" + LeanXMLRcvPath + "\r\n" +
                        "tpprofileid=" + tpprofileid + "\r\n";
                }
                catch
                {
                    exMsg = "LeanXMLUpload - PopulateData \r\n";
                }
                TQL.BZT.Logger.LogGenerator.Log(false, false, true, false, true, "TQL.BZT.Rules.LeanXMLUpload", "TQL.BZT.Rules.LeanXMLUpload.Rules210.PopulateData+\r\n" + exMsg, 2023, EventLogEntryType.Error, ex);

                exMsg = null;
            }
            finally
            {
                srbase64 = null;
                sha1value = null;
                ShipmentID = null;
                CustomerPO = null;
                LeanXMLRcvPath = null;
            }






        }

        private static void PopulateLeanDocuments(ref TQLBZTEDI210 edi210obj)
        {
            ICabServiceReference.ICABDocumentViewerClient client = new ICabServiceReference.ICABDocumentViewerClient();
            string srbase64 = string.Empty;
            string sha1value = string.Empty;
            int PONumber = Convert.ToInt32(edi210obj.LOADHDR.LOADHDRINFO.PONUMBER);

            string ShipmentID = "";

            string tstring = "Assign Cust PO and Shipment ID";

            string CustomerPO = edi210obj.INVOICE.INVOICEHDR.CUSTOMERPO.Trim();

            if (string.IsNullOrEmpty(edi210obj.LOADHDR.LOADHDRINFO.SHIPMENTID))
                ShipmentID = CustomerPO;
            else
                ShipmentID = edi210obj.LOADHDR.LOADHDRINFO.SHIPMENTID.Trim();


            tstring += "CustPO: " + CustomerPO.Trim() + "  ShipID: " + ShipmentID.Trim();


            edi210obj.LOADHDR.LOADHDRINFO.SHIPMENTID = ShipmentID;


            try
            {

                /*******************************************************************************************************************************************
                 * 
                 * New method to loop through docs based on Doc Type ID (TQL-Accounting-> select * from [Imaging].[dbo].[vw_CategoryDocumentInformation])
                 * 
                 *******************************************************************************************************************************************/

                int tpprofileid = (int)edi210obj.TPPROFILEINFO.TPPROFILEID;

                // Doc Types:
                /*
                 * 15 = BOL
                 * 17 = Receipts
                 * 18 = Invoice
                 * */
                int[] doctypestosend = new int[25];



                /* Read from table.
                doctypestosend[0] = 15;  // BOL - Map to Lean "BOL"
                doctypestosend[1] = 17;  // Receipts - Map to Lean "LUMPERRECEIPT"               
                doctypestosend[2] = 18;  // Invoice - Map to Lean "INVOICE"
                */

                doctypestosend = GetListOfDocsByCustomer(0, tpprofileid);  // Send group ID 0 for now. Not using.
                int categoryID = 2;
                string filename = null;


                List<ICabServiceReference.ICabDocumentView> docstosend = client.GetLoadDocumentByDocumentTypes(PONumber, doctypestosend).ToList();

                // Loop through list of files based on array of doc types.  
                foreach (ICabServiceReference.ICabDocumentView element in docstosend)
                {
                    filename = element.DocumentFileName; // Refer to TQL.BZT.Rules.LeanXMLUpload.Utils for this rule on invoices.
                    string leandoctype = "";
                    if (element.DocumentID == 15) leandoctype = "POD";
                    if (element.DocumentID == 17) leandoctype = "LUMPERRECEIPT";
                    if (element.DocumentID == 18) leandoctype = "INVOICE";

                    ICabServiceReference.ICABDocumentViewerClient ICABclient = new ICabServiceReference.ICABDocumentViewerClient();
                    try
                    {

                        Byte[] sr = ICABclient.GetPDFDocumentByFileName(categoryID, filename, "biztalk", 0);


                        srbase64 = Convert.ToBase64String(sr);
                        //Get the SHA1 Hash
                        using (SHA1Managed sha1 = new SHA1Managed())
                        {
                            sha1value = BitConverter.ToString(sha1.ComputeHash(sr)).Replace("-", "").ToLower();

                        }


                        ICABclient.Close();

                        //Add srbase64 and sha1value to ref numbers
                        string DATETIME = DateTime.Now.ToString("yyyyMMddHHmmss");
                        string DOCTYPE = element.DocumentDescription.Replace(" ", "");
                        string DOCNAME = leandoctype.Trim() + "_" + edi210obj.LOADHDR.LOADHDRINFO.PONUMBER.ToString() + "_" + DATETIME.Trim() + ".pdf";
                        string DOCFILEDATA = srbase64;
                        string DOCCHECKSUM = sha1value;

                        RefNumberInfo r = new RefNumberInfo();
                        r.HDRDETFLAG = leandoctype;
                        r.EDISOURCE = DOCNAME;
                        r.REFNUMBER = DOCFILEDATA;
                        r.REFNUMBERQUAL = DOCCHECKSUM;
                        r.EDI210DESTINATION = "LEANDOC";
                        edi210obj.LOADHDR.REFNUMBERINFOCollection.Items.Add(r);

                    }
                    catch (Exception ex)
                    {

                        ICABclient.Abort();
                        throw ex;
                    }

                }

                /************************************************************************************************************
                 * 
                 * Original Method to pull docs by ponumber, then loop through.
                 * 
                 * **********************************************************************************************************/


            }
            catch (Exception ex)
            {

                client.Abort();

            }
            //return srbase64;

        }

        public static int[] GetListOfDocsByCustomer(int tp210GroupID, int TPID)
        {
            // Temp proc until Amar finishes her logic for EDI Plus and LTL. End of April 2015
            int[] doctypestosend = new int[25];

            try
            {
                string gDBConnstr = System.Configuration.ConfigurationManager.ConnectionStrings["TQLConnectionStringDefault"].ConnectionString;

                // set to devsqlclst if not returned from configuration file
                if (string.IsNullOrEmpty(gDBConnstr))
                {
                    // If this is defined in configuration file , if not it will take default
                    gDBConnstr = "Data Source=devsqlclst;Initial Catalog=TQL;Integrated Security=True;";
                }

                using (SqlConnection conn = new SqlConnection(gDBConnstr))
                {
                    int err = 0;
                    string errmsg = "";
                    SqlCommand cmd = new SqlCommand("spBztEDIPlusGetDocInfoByTPID", conn);

                    cmd.Parameters.AddWithValue("@TPProfileID", TPID);
                    cmd.Parameters.AddWithValue("@ErrorNumber", err);
                    cmd.Parameters.AddWithValue("@ErrorMessage", errmsg);

                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    conn.Open();

                    SqlDataReader dr = cmd.ExecuteReader();

                    int rowx = 0;

                    while (dr.Read())
                    {
                        int doctypeid = (int)dr["ICABDocTypeId"];
                        doctypestosend[rowx] = doctypeid;
                        rowx++;
                    }

                }

            }
            catch (Exception e)
            {
                throw e;

            }

            return doctypestosend;

        }


    }
}
